name: main

permissions:
  id-token: write

on:
  pull_request:
    branches:
      - main
    paths:
      - '!**/*'
      - '**/*.py'
      - '!**/ft3/__init__.py'
  push:
    branches:
      - main

env:
  PY_VERSIONS: "[\"3.12\",\"3.11\",\"3.10\"]"

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - id: install-npm-deps
        run: npm i @actions/core @actions/github
      - id: validate-commit-message
        uses: ./.github/actions/validate-commit-message
        if: github.event_name == 'pull_request'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
  setup:
    needs: [validate]
    runs-on: ubuntu-latest
    outputs:
      python-versions: ${{ steps.setVariables.outputs.python-versions }}
    steps:
      - id: setVariables
        run: |
          echo "python-versions=${{ toJson(env.PY_VERSIONS) }}" >> $GITHUB_OUTPUT
  lint:
    needs: [validate, setup]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python Latest
        uses: actions/setup-python@v5
        with:
          python-version: ${{ fromJson(env.PY_VERSIONS)[0] }}
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: install deps
        run: |
          python -m pip install ".[develop]"
      - name: ruff
        run: |
          python -m ruff check . \
            --config pyproject.toml \
            --diff \
            --show-files \
            --exit-non-zero-on-fix
  test:
    needs: [validate, setup, lint]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ${{ fromJson(needs.setup.outputs.python-versions) }}
        os: [macos-latest, ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: setup python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: setup dependencies
        run: |
          python -m pip install ".[develop]"
      - name: mypy
        run: python -m mypy
      - name: pytest
        run: pytest --verbose
  release:
    needs: [validate, setup, lint, test]
    if: github.repository == 'dan1hc/ft3'
    name: semantic release
    runs-on: ubuntu-latest
    concurrency: push
    environment:
      name: pypi
      url: https://pypi.org/p/ft3
    permissions:
      actions: write
      contents: write
      deployments: write
      id-token: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event_name == 'push' && github.ref_name || github.head_ref }}
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - name: semantic release
        id: release
        uses: python-semantic-release/python-semantic-release@master
        with:
          changelog: ${{ github.event_name == 'push' }}
          github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          prerelease: ${{ github.event_name == 'pull_request' }}
      - name: publish pypi
        id: pypi-publish
        if: steps.release.outputs.released == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true
      - name: publish github release
        id: github-release
        if: steps.release.outputs.released == 'true'
        uses: python-semantic-release/upload-to-gh-release@main
        with:
          github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          tag: ${{ steps.release.outputs.tag }}
